# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
    
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: wsl
    container:
      image: davevader/dare_test:1.0

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake Release
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -GNinja -DUSE_GTEST=${{env.USE_GTEST}}
      # run: echo Hello World
      run: |
          mkdir build_release && cd build_release
          cmake .. -DCMAKE_BUILD_TYPE=Release -GNinja -DUSE_GTEST=OFF -DDEBUG=OFF
          
    - name: Build Release
      run: |
          cd build_release
          ninja -j 4
          
    - name: Configure CMake Debug
      run: |
          mkdir build_debug && cd build_debug
          cmake .. -DCMAKE_BUILD_TYPE=Debug -GNinja -DUSE_GTEST=OFF -DDEBUG=ON
          
    - name: Build Debug
      run: |
          cd build_debug
          ninja -j 4
  test:
    runs-on: wsl
    container:
      image: davevader/dare_test:1.0

    steps:
    - uses: actions/checkout@v3
    
    - name: Configure CMake Test
      run: |
          mkdir build_test && cd build_test
          cmake .. -DCMAKE_BUILD_TYPE=Release -GNinja -DUSE_GTEST=ON -DDEBUG=ON

    - name: Build Test
      run: |
          cd build_test
          ninja -j 4

    - name: Run Test Serial
      run: |
          cd build_test
          mpirun -n 1 ./unit_test --gtest_output="xml:${pwd}\Report_P1.xml"
          ls
          
    - name: Run Test 2 Processes
      run: |
        cd build_test
        mpirun -n 2 ./unit_test

    - name: Run Test 3 Processes
      run: |
        cd build_test
        mpirun -n 3 ./unit_test
        
    - name: Run Test 4 Processes
      run: |
        cd build_test
        mpirun -n 4 ./unit_test

    - name: Archive Testing Reports
      uses: actions/upload-artifact@v3
      with:
        name: test_reports
        path: test_build/*xml

